AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: An Application Load Balancer and an AWS Lambda function.
Parameters:
  VpcId:
    Type: String
    Description: VPC id
    Default: vpc-869259ed
  PublicSubnet1:
    Type: String
    Default: subnet-b4a583f8
  PublicSubnet2:
    Type: String
    Default: subnet-12137b69
  CertificateArn:
    Type: String
    Default: arn:aws:acm:ap-south-1:301838289846:certificate/4cb55a71-32a2-45ac-a2c5-64fa948ca293
  authorizationEndpoint:
    Type: String
    Description: account endpoint
    Default: https://login.microsoftonline.com/d21e0fcc-fc42-41b3-b968-cc60f1ab807e/oauth2/v2.0/authorize
  clientId:
    Type: String
    Description: clinet ID for application
    Default: 4mronkevv8o7vc0v21ugcv29vj
  clientSecret:
    Type: String
    Description: client secret for application
    Default: ngt8Q~tH26R-imeNTOVToR_ADXK.hq1BGLD_Bds7
  issuer:
    Type: String
    Description: issuer of  account
    Default: https://login.microsoftonline.com/d21e0fcc-fc42-41b3-b968-cc60f1ab807e/v2.0
  tokenEndpoint:
    Type: String
    Description: token endpoint
    Default: https://login.microsoftonline.com/d21e0fcc-fc42-41b3-b968-cc60f1ab807e/oauth2/v2.0/token
  userInfoEndpoint:
    Type: String
    Description: user info endpoint
    Default: https://graph.microsoft.com/oidc/userinfo
  HostedZoneId:
    Type: String
    Default: Z0735990329NC36TCWGFH
  Recordname:
    Type: String
    Default: www.dev.pennysaver.in
  ExistingTable:
    Type: String
    Default: transactions
    Description: (Required) The name of existing DynamoDB
Globals:
  Function:
    MemorySize: 128
    Architectures:
    - arm64
    Handler: app.lambda_handler
    Runtime: python3.8
    Timeout: 29
    Environment:
      Variables:
        RUST_BACKTRACE: 1
        RUST_LOG: info
Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MyLambdaFunction
      Policies:
      - AWSLambdaBasicExecutionRole
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ExistingTable
      Tags:
        name:
          Ref: AWS::StackName
    Metadata:
      SamResourceId: MyLambdaFunction
  MyLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - MyLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups:
      - Ref: MySecurityGroup
      Tags:
      - Key: name
        Value:
          Ref: AWS::StackName
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyLambdaFunctionPermission
    Properties:
      TargetType: lambda
      Targets:
      - Id:
          Fn::GetAtt:
          - MyLambdaFunction
          - Arn
      Tags:
      - Key: name
        Value:
          Ref: AWS::StackName
  MyHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: MyLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          Ref: CertificateArn
      DefaultActions:
      - Order: 1
        Type: authenticate-oidc
        AuthenticateOidcConfig:
          AuthorizationEndpoint:
            Ref: authorizationEndpoint
          ClientId:
            Ref: clientId
          ClientSecret:
            Ref: clientSecret
          Issuer:
            Ref: issuer
          OnUnauthenticatedRequest: authenticate
          Scope: openid profile
          SessionCookieName: AWSELBAuthSessionCookie
          SessionTimeout: 604800
          TokenEndpoint:
            Ref: tokenEndpoint
          UserInfoEndpoint:
            Ref: userInfoEndpoint
      - Order: 2
        TargetGroupArn:
          Ref: MyTargetGroup
        Type: forward
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Ref: AWS::StackName
      GroupDescription: Allow http on port 80 and 443
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: name
        Value:
          Ref: AWS::StackName
  DnsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: Recordname
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - MyLoadBalancer
          - CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt:
          - MyLoadBalancer
          - DNSName
      Region: ap-south-1
      SetIdentifier: liberty
Outputs:
  DNSName:
    Value:
      Fn::GetAtt:
      - MyLoadBalancer
      - DNSName
